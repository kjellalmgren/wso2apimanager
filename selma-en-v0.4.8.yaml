openapi: 3.0.0
info:
  version: "0.4.8"
  ############################################################################################
  # 2019-01-15 0.2.0 kal Initial version
  # 2019-02-10 0.2.1 kal Minor changes
  # 2019-02-11 0.2.2 kal getCustomer, getCustomers
  # 2019-02-12 0.2.3 kal updateCustomer, deleteCustomer
  # 2019-02-12 0.2.4 kal getCompany, getCompanies
  # 2019-02-12 0.2.5 kal updateCompany, deleteCompany
  # 2019-02-12 0.2.6 kal Added eMail and mobile number to customerType
  # 2019-02-12 0.2.7 kal Added household object
  # 2019-02-12 0.2.8 kal Added loan object
  # 2019-02-13 0.2.9 kal Added colleteral object
  # 2019-02-13 0.3.0 kal Added external loans
  # 2019-02-13 0.3.1 kal future functionality and documentation
  # 2019-02-13 0.3.2 kal Add element in customerTypes
  # 2019-02-13 0.3.3 kal Added PersonalEconomies
  # 2019-02-13 0.3.4 kal Fixed bugg, only return 200 OK when delete is executed
  # 2019-02-13 0.3.5 kal Removed customerId from Loan, it will only be connected PrcoessId
  # 2019-02-13 0.3.6 kal Added CompanyEconomy
  # 2019-02-14 0.3.7 kal Added attribute element in many custom type definitions
  # 2019-02-15 0.3.8 kal Add purposes, main purposes, purposes
  # 2019-02-15 0.3.9 kal Minor changes, spelling and grammer, purposeDisplayText
  # 2019-02-15 0.4.0 kal Changed purposes of loan, enum of purposes displayText
  # 2019-02-18 0.4.1 kal Added budget object to the model
  # 2019-02-18 0.4.2 kal Added interface on the process level
  # 2019-02-18 0.4.3 kal Spelling error on collateral and collaterals object in the model
  # 2019-02-19 0.4.4 kal Changed Customers/Customer to Applicants/Applicant, Loans has been
  #                      removed from Customer and are direct under ProcessId,
  #                      applicantMember (LHEK)
  #                      memberInLHEK
  #                      ContactInformationType
  #                      Child care costs has been removed (ChildCareCosts)
  # 2019-02-21 0.4.5 kal Househould has been changed, customer connection has been dropped
  #                      setCaseIdStatus(..)
  #                      reserveCaseId(..)
  # 2019-02-22 0.4.6 kal HouseholdName har tagits bort från HouseholdType
  #                      deleteHouseholdMember has been added
  #                      applicantEmployeed has been added in applicantType
  #                      KycInformation has been added to the model
  #                      addHouseholdMember has been added
  # 2019-02-24 0.4.7 kal add more elements to KycInformationType
  #                      added responses under components
  #                      applicantLPEmployment has been added to applicantType
  #                      collateralType, we has added useAsCollateral and buyCollateral
  #                      extRedeemLoan has been added to extLoanType
  #                      submitApplication has been added
  # 2019-02-27 0.4.8 kal Changed Processes to return process createdDate in Activiti
  ###########################################################################################
  # Errors definitions has not been defined in any responses
  ###########################################################################################
  # Future request
  #   getAvailableProcessIds(customerId)
  #     - will return all of user started applications
  #     TBD - mybe we should only handle one processId for an applications
  #     - Be able to delete an ProcessId (kund avslår ansökan)
  #     - how do we handle status codes, is it at the Activiti-layer
  #     - Add CompanyEconomy (budget) fixed in v0.3.6
  #     - Add attachement
  #   Add all Applicants with status on-going application to LIME to support customer service
  # bugs:
  #     Fixed in 0.3.4 Closed
  #   - delete methods should NOT return the specific type, just 200 OK
  #     Fixed in 0.3.5 Closed
  #   - External loans have to be connected to prcoessId and CustomerId
  #     Fixed in 0.3.5 Closed
  #   - New loan should be connected to only ProcessId (sökt lån)
  #     (changed Loan to be part of Customer)
  #
  ###########################################################################################
  title: Selma SME Light
  description: >-
    This definition is the API between customer SME-Gui and the persistence framework based on Activiti<br>
    !---------------------------------------------------------------------------<br>
    <br>
    **Processes**<br>
    **Processes/Process**<br>
    <br>
    **BusinessArea**                                            (TBD)<br>
    **Security/oauth2**                                         (TBD)<br>
    <br>
    **ApplicationData**<br>
    **Loans/Loan**                                              (TBD)<br>
    **Applicant/ELoans/ELoan**<br>
    **Applicant/PersonalEconomies/PersonalEconomy**<br>
    **Applicant/ApplicantInformation**                         (TBD)<br>
    <br>
    **Companies/Budgets/Budget**<br>
    **Companies/CompanyEconomies/CompanyEconomy**<br>
    **Companies/Collaterals/Colleteral**<br>
    <br>
    To be decided where this should be connected (Sökande/Medsökande)<br>
    **Households**<br>
    **Households/Household**<br>
    **Households/Hosueold/householdMember
    **Households/Hosuehold/Cars/Car**<br>
    **Households/Household/Childs/Child**<br>
    <br>
    **KycInformations**<br>
    **KycInformations/KycInformation
    <br>
    When customer logg-in to Selma-EN, we will create a processId with apllicant
    CustomerId (from BankID).
    When a customer added attachment to the application, we don't have a CaseId i LP,
    should we add a LP-Service to create/reserve a caseId to be able to attach
    a document to the caseId in DM.
    
    All update-methods should act as a add-method if e.g.Applicant does not exist<br>
    ! ----------------------------------------------------------------------------<br>
    
  termsOfService: terms
  contact:
    name: API v1 for SME initiative
    email: developer@landshypotek.se
    url: api.landshypotek.se/v1/sme
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
tags:
  - name: Selma SME(EN) API Definitions
    description: Access layer to the process engine(Activiti)
paths:
  #
  ##################################################
  # process level action, return a customers all
  # active applications (processes in Activiti)
  ##################################################
  /v1/Processes/{customerId}:
    get:
      tags:
        - getProcesses
      summary: get a list of active processes for a customerId
      description: >-
        Return a list of active applications for a customer
      operationId: getProcesses
      parameters:
        - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Processes'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ##################################################
  # deleteProcess
  ##################################################
  /v1/deleteProcess/{processId}:
    post:
      tags:
        - deleteProcess
      summary: Delete a specific processId in Activiti
      description: >-
        Will remove evry customerId under a processId in Activiti framework.
        All Applicants in a credit case will be deleted
      operationId: deleteProcess
      parameters:
      # required parameters to delete a process in Activiti
        - $ref: '#/components/parameters/processId'
      #requestBody:
      #  $ref: '#/components/requestBodies/customerUpdate'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                # This has to be defined in a different way
                $ref: '#/components/responses/200OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ##################################################
  # reserveCaseId in Loan Process
  # We should have a discussion if we should use
  # customerId as a parameter in this method
  ##################################################
  /v1/reserveCaseId/{processId}/{customerId}:
    post:
      tags:
        - reserveCaseId
      summary: Reserve a CaseId in Loan Process
      description: >-
        Reserve a CaseId in Loan Process to be able to use attachment i DM
      operationId: reserveCaseId
      parameters:
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/caseId'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ##################################################
  # setCaseIdStatus
  ##################################################
  /v1/setCaseIdStatus/{processId}/{caseId}/{caseIdStatus}:
    post:
      tags:
        - setCaseIdStatus
      summary: set status on the reserved caseId
      description: When we create/reserve a caseId in LP we also have to set the status
      operationId: setCaseIdStatus
      parameters:
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/caseId'
        - $ref: '#/components/parameters/caseIdStatus'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                # This has to be defined in a different way
                $ref: '#/components/responses/200OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ##################################################
  # get a specific Applicant
  ##################################################
  /v1/Applicant/{processId}/{customerId}:
    get:
      tags:
        - getApplicant
      summary: Get a specific applicant by processId, customerId
      description: Get a specific applicant from the process layer
      operationId: getCustomer
      parameters:
        # parameters required for getCustomer request
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicant'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ####################################################################
  # Get a list of available applicant for a given processId in Activiti
  ####################################################################
  /v1/Applicants/{processId}:
    get:
      tags:
        - getApplicants
      summary: get a list of available applicants
      description: Get a list of available applicants by ProcessId....
      operationId: getApplicants
      parameters:
        # parameters required for getApplicants request
        - $ref: '#/components/parameters/processId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicants'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ###########################################
  # Update of a specific Applicant
  ###########################################
  /v1/updateApplicant/{processId}/{customerId}:
    post:
      tags:
        - updateApplicant
      summary: update a specific applicant in Activiti
      description: >-
        TBD
      operationId: updateApplicant
      parameters:
      # required parameters to update a applicant in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
      requestBody:
        $ref: '#/components/requestBodies/updateApplicant'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicant'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ############################################
  # Delete a specific applicant
  ############################################
  /v1/deleteApplicant/{processId}/{customerId}:
    post:
      tags:
        - deleteApplicant
      summary: Delete a specific applicant in Activiti
      description: >-
        TBD
      operationId: deleteApplicant
      parameters:
      # required parameters to delete a customer in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
      #requestBody:
      #  $ref: '#/components/requestBodies/applicantUpdate'
      responses:
        200:
          description: Successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ####################################################
  # Company
  ####################################################
  # get a specific company
  /v1/Company/{processId}/{companyId}:
    get:
      tags:
        - getCompany
      summary: Get a specific company by ProcessId, companyId
      description: Get a specific company from the process layer
      operationId: getCompany
      parameters:
        # parameters required for getCompany request
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/companyId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  #####################################################################
  # Get a list of available companies for a given processId in Activiti
  #####################################################################
  /v1/Companies/{processId}:
    get:
      tags:
        - getCompanies
      summary: get a list of available companies
      description: Get a list of available companies by ProcessId....
      operationId: getCompanies
      parameters:
        # parameters required for getCompanies request
        - $ref: '#/components/parameters/processId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Companies'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ########################################################
  # Update of a specific company
  ########################################################
  /v1/updateCompany/{processId}/{companyId}:
    post:
      tags:
        - updateCompany
      summary: update a specific company in Activiti
      description: >-
        TBD
      operationId: updateCompany
      parameters:
      # required parameters to update a customer in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/companyId'
      requestBody:
        $ref: '#/components/requestBodies/updateCompany'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ########################################################
  # Delete a specific company
  ########################################################
  /v1/deleteCompany/{processId}/{companyId}:
    post:
      tags:
        - deleteCompany
      summary: Delete a specific company in Activiti
      description: descripition
      operationId: deleteCompany
      parameters:
      # required parameters to delete a customer in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/companyId'
      #requestBody:
      #  $ref: '#/components/requestBodies/customerUpdate'
      responses:
        200:
          description: Successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ##################################################
  # get a specific household
  ##################################################
  /v1/Household/{processId}/{householdId}:
    get:
      tags:
        - getHousehold
      summary: Get a specific household by processId
      description: Get a specific household from the process layer
      operationId: getHousehold
      parameters:
        # parameters required for getCustomer request
        - $ref: '#/components/parameters/processId'
        # - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/householdId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Household'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  #####################################################################################
  # Get a list of available households for a given processId  in Activiti
  #####################################################################################
  /v1/Households/{processId}:
    get:
      tags:
        - getHouseholds
      summary: get a list of available households
      description: Get a list of available households by ProcessId....
      operationId: getHouseholds
      parameters:
        # parameters required for getHouseholds request
        - $ref: '#/components/parameters/processId'
        # - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Households'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ###########################################
  # Update of a specific household
  ###########################################
  /v1/updateHousehold/{processId}/{householdId}:
    post:
      tags:
        - updateHousehold
      summary: update a specific household in Activiti
      description: >-
        TBD
      operationId: updateHousehold
      parameters:
      # required parameters to update a household in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/householdId'
      requestBody:
        $ref: '#/components/requestBodies/updateHousehold'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Household'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ############################################
  # Delete a specific household
  ############################################
  /v1/deleteHousehold/{processId}/{householdId}:
    post:
      tags:
        - deleteHousehold
      summary: Delete a specific household in Activiti
      description: >-
        TBD
      operationId: deleteHousehold
      parameters:
      # required parameters to delete a household in Activiti
        - $ref: '#/components/parameters/processId'
        # - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/householdId'
      #requestBody:
      #  $ref: '#/components/requestBodies/householdUpdate'
      responses:
        200:
          description: Successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  #################################################################
  # deleteHouseholdMember
  #################################################################
  /v1/deleteHouseholdMember/{processId}/{householdId}/{customerId}:
    post:
      tags:
        - deleteHouseholdMember
      summary: Remove a applicant from a specific houshold
      description: Will remove {customerId} from the array customerIds in Household 
      operationId: deleteHouseholdMember
      parameters:
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/householdId'
        - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Household'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ##################################################################
  # addHouseholdMember
  ##################################################################
  /v1/addHouseholdMember/{processId}/{householdId}/{customerId}:
    post:
      tags:
        - addHouseholdMember
      summary: Add applicant to a specific household
      description: Will add {customerId} to the array customerIds in Household
      operationId: addHouseholdMember
      parameters:
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/householdId'
        - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Household'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
      
  ##################################################
  # get a specific colleteral
  ##################################################
  /v1/Collateral/{processId}/{customerId}/{collateralId}:
    get:
      tags:
        - getCollateral
      summary: Get a specific collateral by processId, customerId and collateralId
      description: Get a specific colleteral from the process layer
      operationId: getColleteral
      parameters:
        # parameters required for getColleteral request
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/collateralId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collateral'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ######################################################################################
  # Get a list of available collaterals for a given processId and customerId in Activiti
  ######################################################################################
  /v1/Collaterals/{processId}/{customerId}:
    get:
      tags:
        - getCollaterals
      summary: get a list of available collaterals
      description: Get a list of available collaterals by ProcessId and customerId...
      operationId: getCollaterals
      parameters:
        # parameters required for getCollaterals request
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collaterals'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ###########################################
  # Update of a specific Collateral
  ###########################################
  /v1/updateCollateral/{processId}/{customerId}/{collateralId}:
    post:
      tags:
        - updateCollateral
      summary: update a specific collateral in Activiti
      description: descripition
      operationId: updateCollateral
      parameters:
      # required parameters to update a colleteral in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/collateralId'
      requestBody:
        $ref: '#/components/requestBodies/updateCollateral'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collateral'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ############################################
  # Delete a specific colleteral
  ############################################
  /v1/deleteCollateral/{processId}/{customerId}/{collateralId}:
    post:
      tags:
        - deleteCollateral
      summary: Delete a specific collateral in Activiti
      description: >-
        TBD
      operationId: deleteCollateral
      parameters:
      # required parameters to delete a colleteral in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/collateralId'
      #requestBody:
      #  $ref: '#/components/requestBodies/collateralUpdate'
      responses:
        200:
          description: Successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ##################################################
  # get a specific loan by processId and loanId
  ##################################################
  /v1/Loan/{processId}/{loanId}:
    get:
      tags:
        - getLoan
      summary: Get a specific loan by processId
      description: Get a specific loan from customerId and processId layer
      operationId: getLoan
      parameters:
        # parameters required for getCustomer request
        - $ref: '#/components/parameters/processId'
        # - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/loanId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ################################################################################
  # Get a list of available loans for a given processId and companyId in Activiti
  ################################################################################
  /v1/Loans/{processId}:
    get:
      tags:
        - getLoans
      summary: get a list of available loans on processId
      description: Get a list of available loans by ProcessId...
      operationId: getLoans
      parameters:
        # parameters required for getHouseholds request
        - $ref: '#/components/parameters/processId'
        # - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loans'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ###########################################
  # Update of a specific loan
  ###########################################
  /v1/updateLoan/{processId}/{loanId}:
    post:
      tags:
        - updateLoan
      summary: update a specific loan in Activiti
      description: >-
        TBD
      operationId: updateLoan
      parameters:
      # required parameters to update a customer in Activiti
        - $ref: '#/components/parameters/processId'
        # - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/loanId'
      requestBody:
        $ref: '#/components/requestBodies/updateLoan'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ############################################
  # Delete a specific loan
  ############################################
  /v1/deleteLoan/{processId}/{loanId}:
    post:
      tags:
        - deleteLoan
      summary: Delete a specific loan on a customer in Activiti
      description: >-
        TBD
      operationId: deleteLoan
      parameters:
      # required parameters to delete a loan in Activiti
        - $ref: '#/components/parameters/processId'
        # - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/loanId'
      #requestBody:
      #  $ref: '#/components/requestBodies/householdUpdate'
      responses:
        200:
          description: Successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ##################################################
  # get a specific extloan
  ##################################################
  /v1/ExtLoan/{processId}/{customerId}/{extloanId}:
    get:
      tags:
        - getExtLoan
      summary: Get a specific extloan by processId, customerId
      description: Get a specific extloan from the process layer
      operationId: getExtLoan
      parameters:
        # parameters required for getExtLoan request
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/extloanId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtLoan'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ################################################################################
  # Get a list of available extloans for a given processId and customerId in Activiti
  ################################################################################
  /v1/ExtLoans/{processId}/{customerId}:
    get:
      tags:
        - getExtLoans
      summary: get a list of available extloans
      description: Get a list of available extloans by ProcessId and customerId....
      operationId: getExtLoans
      parameters:
        # parameters required for getExtLoans request
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtLoans'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ###########################################
  # Update of a specific extloan
  ###########################################
  /v1/updateExtLoan/{processId}/{customerId}/{extloanId}:
    post:
      tags:
        - updateExtLoan
      summary: update a specific extloan in Activiti
      description: >-
        TBD
      operationId: updateExtLoan
      parameters:
      # required parameters to update a extLoan in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/extloanId'
      requestBody:
        $ref: '#/components/requestBodies/updateExtLoan'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtLoan'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ############################################
  # Delete a specific extloan
  ############################################
  /v1/deleteExtLoan/{processId}/{customerId}/{extloanId}:
    post:
      tags:
        - deleteExtLoan
      summary: Delete a specific extloan in Activiti
      description: >-
        TBD
      operationId: deleteExtLoan
      parameters:
      # required parameters to delete a loan in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/extloanId'
      #requestBody:
      #  $ref: '#/components/requestBodies/extloanUpdate'
      responses:
        200:
          description: Successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ###############################################
  # PersonalEconomy
  ###############################################
  /v1/PersonalEconomy/{processId}/{customerId}/{personalEconomyId}:
    get:
      tags:
        - getPersonalEconomy
      summary: Get a specific PersonalEconomy by processId, customerId
      description: Get a specific PersonalEconomy from the process layer
      operationId: getPersonalEconomy
      parameters:
        # parameters required for getPersonalEconomy request
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/personalEconomyId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalEconomy'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ################################################################################
  # Get a list of available PersonalEconomies for a given processId and customerId
  # in Activiti
  ################################################################################
  /v1/PersonalEconomies/{processId}/{customerId}:
    get:
      tags:
        - getPersonalEconomies
      summary: get a list of available PersonalEconomies
      description: Get a list of available PersonalEconomies by ProcessId and customerId....
      operationId: getPersonalEconomies
      parameters:
        # parameters required for getPersonalEconomies request
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalEconomies'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ###########################################
  # Update of a specific PersonalEconomy
  ###########################################
  /v1/updatePersonalEconomy/{processId}/{customerId}/{personalEconomyId}:
    post:
      tags:
        - updatePersonalEconomy
      summary: update a specific PersonalEconomy in Activiti
      description: >-
        TBD
      operationId: updatePersonalEconomy
      parameters:
      # required parameters to update a PersonalEconomy in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/personalEconomyId'
      requestBody:
        $ref: '#/components/requestBodies/updatePersonalEconomy'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalEconomy'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ############################################
  # Delete a specific PersonalEconomy
  ############################################
  /v1/deletePersonalEconomy/{processId}/{customerId}/{personalEconomyId}:
    post:
      tags:
        - deletePersonalEconomy
      summary: Delete a specific PersonalEconomy in Activiti
      description: >-
        TBD
      operationId: deletePersonalEconomy
      parameters:
      # required parameters to delete a loan in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/personalEconomyId'
      #requestBody:
      #  $ref: '#/components/requestBodies/personalEconomyUpdate'
      responses:
        200:
          description: Successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ###############################################
  # CompanyEconomy
  ###############################################
  /v1/CompanyEconomy/{processId}/{companyEconomyId}:
    get:
      tags:
        - getCompanyEconomy
      summary: Get a specific CompanyEconomy by processId
      description: Get a specific CompanyEconomy from the process layer
      operationId: getCompanyEconomy
      parameters:
        # parameters required for getCompanyEconomy request
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/companyEconomyId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyEconomy'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ################################################################################
  # Get a list of available CompanyEconomies for a given processId
  # in Activiti
  ################################################################################
  /v1/CompanyEconomies/{processId}/{companyId}:
    get:
      tags:
        - getCompanyEconomies
      summary: get a list of available CompanyEconomies
      description: Get a list of available CompanyEconomies by ProcessId and companyId
      operationId: getCompanyEconomies
      parameters:
        # parameters required for getCompanylEconomies request
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/companyId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyEconomies'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ###########################################
  # Update of a specific CompanyEconomy
  ###########################################
  /v1/updateCompanyEconomy/{processId}/{companyId}/{companyEconomyId}:
    post:
      tags:
        - updateCompanyEconomy
      summary: update a specific CompanyEconomy in Activiti
      description: Update economy on a specific company
      operationId: updateCompanyEconomy
      parameters:
      # required parameters to update a CompanyEconomy in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/companyId'
        - $ref: '#/components/parameters/companyEconomyId'
      requestBody:
        $ref: '#/components/requestBodies/updateCompanyEconomy'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyEconomy'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ############################################
  # Delete a specific CompanyEconomy
  ############################################
  /v1/deleteCompanyEconomy/{processId}/{companyId}/{companyEconomyId}:
    post:
      tags:
        - deleteCompanyEconomy
      summary: Delete a specific CompanyEconomy on a companyId in Activiti
      description: >-
        TBD
      operationId: deleteCompanyEconomy
      parameters:
      # required parameters to delete a loan in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/companyId'
        - $ref: '#/components/parameters/companyEconomyId'
      #requestBody:
      #  $ref: '#/components/requestBodies/companyEconomyUpdate'
      responses:
        200:
          description: Successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ##################################################################################
  # Get a list of available Budgets for a given processId om a companyId in Activiti
  ##################################################################################
  /v1/Budgets/{processId}/{companyId}:
    get:
      tags:
        - getBudgets
      summary: get a list of available budgets
      description: Get a list of available Budgets
      operationId: getBudgets
      parameters:
        # parameters required for getBudgets request
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/companyId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budgets'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ###########################################
  # Update of a specific Budget
  ###########################################
  /v1/updateBudget/{processId}/{companyId}/{companyEconomyId}:
    post:
      tags:
        - updateBudget
      summary: update a specific Budget in Activiti
      description: >-
        TBD
      operationId: updateBudget
      parameters:
      # required parameters to update a Budget in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/companyId'
        - $ref: '#/components/parameters/companyEconomyId'
      requestBody:
        $ref: '#/components/requestBodies/updateBudget'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ############################################
  # Delete a specific Budget
  ############################################
  /v1/deleteBudget/{processId}/{companyId}/{companyEconomyId}:
    post:
      tags:
        - deleteBudget
      summary: Delete a specific Budget in Activiti
      description: >-
        TBD
      operationId: deleteBudget
      parameters:
      # required parameters to delete a budget in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/companyId'
        - $ref: '#/components/parameters/companyEconomyId'
      #requestBody:
      #  $ref: '#/components/requestBodies/budgetUpdate'
      responses:
        200:
          description: Successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  #############################################
  # KycInformations
  #############################################
  /v1/KycInformations/{processId}/{customerId}:
    get:
      tags:
        - getKycInformations
      summary: get a list of available KycInformations
      description: Get a list of available KycInformations
      operationId: getKycInformations
      parameters:
        # parameters required for getBudgets request
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycInformations'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ####################################################
  # KycInformation
  ####################################################
  /v1/KycInformation/{processId}/{customerId}/{kycId}:
    get:
      tags:
        - getKycInformation
      summary: get a list of available KycInformations
      description: Get a list of available KycInformations
      operationId: getKycInformations
      parameters:
        # parameters required for getBudgets request
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/kycId'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycInformation'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  #
  #########################################################
  # Update of a specific KycInformation
  #########################################################
  /v1/updateKycInformation/{processId}/{customerId}/{kycId}:
    post:
      tags:
        - updateKycInformation
      summary: update a specific KycInformation in Activiti
      description: >-
        TBD
      operationId: updateKycInformation
      parameters:
      # required parameters to update a Budget in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/customerId'
        - $ref: '#/components/parameters/kycId'
      requestBody:
        $ref: '#/components/requestBodies/updateKycInformation'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycInformation'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  ############################################
  # Delete a specific KycInformation
  ############################################
  /v1/deleteKycInformation/{processId}/{companyId}/{kycId}:
    post:
      tags:
        - deleteKycInformation
      summary: Delete a specific KycInformation in Activiti
      description: >-
        TBD
      operationId: deleteKycInformation
      parameters:
      # required parameters to delete a budget in Activiti
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/companyId'
        - $ref: '#/components/parameters/kycId'
      #requestBody:
      #  $ref: '#/components/requestBodies/kycInformationUpdate'
      responses:
        200:
          description: Successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
  #################################################
  # Submit Application
  #################################################
  /v1/submitApplication/{processId}/{submitApplication}:
    post:
      tags:
        - submitApplication
      summary: Submit Application to Landshypotek and handling by a officer
      description: TBD
      operationId: submitApplication
      parameters:
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/submitApplication'
      responses:
        200:
          description: Successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/InvalidPage'
        500:
          $ref: '#/components/responses/PageNotFound'
  #
#####################################################
# Defined servers for the exposed API
#####################################################
servers:
  - url: 'http://localhost:8000/'
  - url: 'https://localhost:8000/'
#
###################################################################################################
###################################################################################################
# schemas definitions
###################################################################################################
###################################################################################################
components:
  schemas:
    #
    #################################################
    # ApplicationData
    #################################################
    caseId:
      description: reserved caseId in Loan Process
      type: string
      example: '106100'
    submitApplication:
      description: Jag försäkrar att lämnade uppgifter är korrekta. Denna måste vara satt
        till true, annars kan inte ansökan skickas in till LP. Sökande ska klicka i detta val.
        Om vi tycker att sökande behöver fylla i mer för att skicka in ansökan ska denna
        inte gå att sätta till true.
      type: boolean
      enum:
        - true
        - false
      example: true
    #
    #################################################
    # setCaseIdStatus
    #################################################
    caseIdStatus:
      description: Set status on the caseid
      type: string
      enum:
        - CLOSEDBYAPPLICANT   # Kund har aktivt avböjt ansökan
        - STARTEDBYAPPLICANT  # Kund har startat en ansökan
        - CLOSEDBYOFFICER     # av handläggare
        - CLOSEDBYTHINNING    # Gallring?
        - READYFOROFFICER     # Applicant has submitted the application
      example: CLOSEDBYAPPLICANT
    #
    #################################################
    # 200 OK
    #################################################
    #200OK:
    #  description: Successful
    #  type: string
    #  example: '200'
    #
    #################################################
    # ProcessId
    #################################################
    processId:
      description: Activiti framework unique identification
      type: string
      format: uuid
      example: '9a65d28a-46bb-4442-b96d-6a09fda6b18b'
    processCreatedDate:
      description: Activiti, processId created date
    #
    #################################################
    # CustomerIds, belong to a household
    #################################################
    customerIds:
      description: This holds a array of one to many Applicant/make/maka in a household
      type: array
      items:
        $ref: '#/components/schemas/customerId' # should we use applicantId instead?
        # $ref: '#/components/schemas/applicantId'
    #################################################
    # Applicant
    #################################################
    customerId:
      description: >-
        customerId is swedish ssn or corporate organisation number
      type: string
      example: '197001010101'
    applicantId:
      description: >-
        unique id for each applicant in the credit case
      type: string
      format: uuid
      example: '12ab301d-b0ae-46ba-ac99-ff7389fe356e'
    applicantName:
      description: Full name of the customer/applicant
      type: string
      example: 'Anna Andersson'
    applicantAddress:
      description: Street address of Applicant
      type: string
      example: 'Trossvägen 1'
    applicantPostAddress:
      description: Postal number and postal city
      type: string
      example: '181 66 Lidingö'
    applicantRole:
      description: Huvudlåntagare or Medlåntagare i SAP (behöver vi hantera detta?)
      type: string
      example: 'Huvudlåntagare/medlåntagare in SAP'
    applicantEmail:
      description: applicant enter email for notification
      type: string
      example: 'kjell.almgren@landshypotek.se'
    applicantMobileNumber:
      description: applicant entered mobile number for notification
      type: string
      example: '0733981482'
    applicantMember:
      description: Member in Landshypotek Ekonomiska förening (true/false)
      type: boolean
      example: true # behöver utredas -> ToDo
    applicantEmployeed:
      description: Employeed or Not Employeed, from SAP on existing customer and from UC? or entered by customer
      type: string
      enum:
        - EMPLOYEED:
        - NOT_EMPLOYEED:
      example: EMPLOYEED
    applicantLPEmployment:
      description: employment mapping to Loan Process
        PERMANENT - Anställd, tills-vidare-anställd
        TEMPORARY - Tidbegränsad anställning
        PROBATIONARY - Provanställning
        UNEMPLOYMENT_INSURANCE - Arbetslöshetskassa
        SELF_EMPLOYED - Eget företag
        STUDENT_AID - Studiestöd
        PENSION - Inkomst av pension
      type: string
      enum:
        - PERMANENT
        - TEMPORARY
        - PROBATIONARY
        - UNEMPLOYMENT_INSURANCE
        - SELF_EMPLOYED
        - STUDENT_AID
        - PENSION
      example: PERMANENT
    applicantBySms:
      description: Applicant want to be notified by sms (true/false)
      type: boolean
      example: true
    applicantByeMail:
      description: Applicant want to be notified by eMail (true/false)
      type: boolean
      example: false        
    #
    #################################################
    # Company
    #################################################
    companyId:
      description: >-
        generated guid in the model
      type: string
      format: uuid
      example: '02d6a03e-5895-4077-98f7-7a5c192868b7'
    orgNumber:
      description: >-
        Organisation number from external service, swedish ssn (UC or SAP for existing companies)
      type: string
      example: '19550101-1010'
    companyName:
      description: Full name of the company from external services or BusinessName in SAP
      type: string
      example: 'Anna Andersson Mjölkproduktion'
    companyCreated:
      description: >-
        date when company was established, from external service or existing customer in SAP 
      type: string
      example: '2012-01-01'
    #
    #####################################################
    # Household
    #####################################################
    householdId:
      description: Hosuehold identity key
      type: string
      format: uuid
      example: '02d6a03e-5895-4077-98f7-7a5c192878b8'
    numberOfChildsAtHome:
      description: >-
        Number of child in this household
      type: string
      example: '2'
    numberOfCars:
      description: >-
        number of cars in this houshold (Will probably be removed for SME-companies)
      type: string
      example: '2'
    childMaintenanceCost:
      description: Underhållskostnad för barn i annat hushåll
        Underhållskostander barn
      type: string
      example: '2 000 SEK'
    #
    #####################################################
    # Loan
    #####################################################
    loanId:
      description: Loan identity
      type: string
      format: uuid
      example: '08f55e2f-e947-48f4-89d2-d31af2fc28d6'
    loanNumber:
      description: >-
        This will only be a temporary loanNumber, when can we reserve a loan number in SAP
      type: string
      example: '9397000010'
    loanAmount:
      description: >-
        Applicants want to loan this amount
      type: string
      example: '2 500 000 SEK'
    numberOfLoans:
      description: >-
        Customer want to split this loan into 2 loans
      type: string
      example: '2'
    #
    #####################################################
    # Collateral
    #####################################################
    collateralId:
      description: Collateral identity
      type: string
      format: uuid
      example: '82faaa1a-42f7-4d87-aecf-96c450a0ce59'
    collateralName:
      description: Fastighetbeteckning
      type: string
      example: 'SKOGEN 4:3'
    collateralMunicipality:
      description: >-
        Kommun där fastigheten och/eller säkerheten finns registrerad
      type: string
      example: 'Katrineholm'
    collateralStreet:
      description: >-
        Street address of the collateral
      type: string
      example: 'Bergsgatan 12'
    useAsCollateral:
      description: Use this collateral as security in this application
      type: boolean
      enum:
        - true
        - false
      example: false
    buyCollateral:
      description: Applicant has intention to by this collateral
      type: boolean
      enum:
        - true
        - false
      example: true
    #
    #####################################################
    # ExtLoan
    #####################################################
    extloanId:
      description: Type definitions for external loans
      type: string
      format: uuid
      example: '3164d347-e173-4c4f-8839-26d32716e5bf'
    extCreditInstitut:
      description: Kreditinstitut, Bank
      type: string
      example: 'SEB'
    extloanNumber:
      description: Loan originator
      type: string
      example: '0028600'
    extloanClearing:
      description: Clearing number
      type: string
      example: '5270'
    extRedeemLoan:
      description: Redeen loans - Lösa lånet i annan bank
      type: boolean
      enum:
        - true
        - false
      example: true
    #
    #####################################################
    # personalEconomy
    #####################################################
    personalEconomyId:
      description: >-
        Type definitions for personal economy
      type: string
      format: uuid
      example: 'b0c0edaa-3d75-4364-9179-1ecc8d9198d0'
    yearlyIncome:
      description: >-
        TBD
      type: string
      example: '340 000 SEK'
    income:
      description: >-
        TBD
      type: string
      example: '40 000 SEK'
    typeOfEmployeement:
      description: >-
          TBD
      type: string
      example: 'Tillsvidare'
    employeer:
      description: ->
        TBD
      type: string
      example: 'Skatteverket'
    #####################################################
    # Syfte/Ändamål - TBD
    #####################################################
    mainPurposes:
      description: >-
        Ändamål och syfte (TBD)
      type: string
      enum:
        - KOP # Köp
        - OVR # Övertag
        - ULN # Utökning av lån
        - NOB # Nyutlåning mot obelånat
      example: KOP
    purposes:
      description: >-
        Ändamål och syfte ska sättas på respektive lån som går över till LP. I de fall
        där det inte specifiseras ska handläggar gör det innan överföring till SAP.
        Detta för att de ska bli rätt i statistiken ned i SAS.
      type: string
      enum:
        - FKP # Fastighetsköp - privatbostad
        - FAF # Fastighetsköp - annan fastighet
        - FKJ # Fastighetsköp jordbruk
        - FBB # Finanisering befintlig bostad
        - FBI # Finanisering befintlig bostad (omläggning internt)
        - RTM # Ny/tillbyggnad/renovering mjölkstall
    purposeDisplayText:
      description: >-
        TBD
      type: string
      enum:
        - 'Fastighetsköp - privatbostad'
        - 'Fastighetsköp - annan fastighet'
        - 'Fastighetsköp - jordbruk'
        - 'Finansiering befintlig bostad'
        - 'Finansiering befintlig bostad (omläggning internt)'
        - 'Ny/tillbyggnad/renovering mjölkstall'
    #
    #####################################################
    # companyEconomy
    #####################################################
    companyEconomyId:
      description: Type definition for company economy
      type: string
      format: uuid
      example: '32084646-d030-4c51-a316-b1342c3551ab'
    #
    #####################################################
    # Budget
    #####################################################
    budgetId:
      description: >-
        Type definition for company budget
      type: string
      format: uuid
      example: '32084646-d030-4c51-a316-b1342c3551dc'
    #
    #####################################################
    # KycInformation
    #####################################################
    kycId:
      description: Kyc-identity key
      type: string
      format: uuid
      example: '9bca3a55-2458-41d5-9420-f12bdcd0c809'
    kycAcceptUC:
      description: Jag är medveten om att Landshypotek Bank inhämtar en kreditupplysning på mig och att det sker
        när jag går vidare från denna sida i nästa steg i ansökan. 
      type: boolean
      example: false
    kycAcceptGDPR:
      description: Jag är medveten om att Landshypotek Bank behandlar mina personuppgifter i och med ansökan
        och att jag kan läsa mer om Landshypotek Banks personuppgiftsbehandling.
      type: boolean
      example: true
    kycUCAware:
      description: Jag är medveten om att de uppgifter jag lämnar och resultatet av kreditansökan även visas
        för medsökande, om en sådan läggs till senare i ansökan. Om jag äger andra fastigheter, som banken
        hämtar uppgifter om från externa källor, visas även de uppgifterna för medsökande.
      type: boolean
    kycPublicFunction:
      description: Innehar eller har du de 18 senaste månaderna innehaft en viktig offentlig funnktion?
      type: boolean
      example: false
    kycRelatedPublicFunction:
      description: Är du familjemedblem eller medarbetare till en person som har, eller som under de
        senaste 18 månaderna innehaft en viktig offentlig funktion?
      type: boolean
      example: false
    #
    #####################################################
    # END Schema definitions
    #####################################################
    #
    #####################################################
    #####################################################
    # Type definitions
    #####################################################
    #####################################################
    #
    #####################################################
    # applicantType
    #####################################################
    applicantType:
      description: Type of applicant instance
      type: object
      required:
        - processId
        - customerId
        - applicantId
      properties:
        processId:
          $ref: '#/components/schemas/processId'
        # customerId in LP, mybe we will not show this at the client side
        customerId:
          $ref: '#/components/schemas/customerId'
        applicantId:
            $ref: '#/components/schemas/applicantId'
        applicantName:
          $ref: '#/components/schemas/applicantName'
        applicantAddress:
          $ref: '#/components/schemas/applicantAddress'
        applicantPostAddress:
          $ref: '#/components/schemas/applicantPostAddress'
        role:
          # Huvudsökande - medsökande, kvar?
          $ref: '#/components/schemas/applicantRole'
        contactInformation:
          $ref: '#/components/schemas/ContactInformationType'
        applicantEmployeed:
          $ref: '#/components/schemas/applicantEmployeed'
        applicantLPEmployment:
          $ref: '#/components/schemas/applicantLPEmployment'
        member:
          $ref: '#/components/schemas/applicantMember'
        notifiedBySms:
          $ref: '#/components/schemas/applicantBySms'
        notifiedByeMail:
          $ref: '#/components/schemas/applicantByeMail'
    #
    #####################################################
    # Applicant
    #####################################################
    Applicant:
      $ref: '#/components/schemas/applicantType'
    #
    #####################################################
    # Applicants
    #####################################################
    Applicants:
      description: List of applicantType
      type: array
      items:
        $ref: '#/components/schemas/applicantType'
    #
    #####################################################
    # ContactInformationType
    #####################################################
    ContactInformationType:
      description: Contact information definitions
      type: object
      properties:
        eMail:
          $ref: '#/components/schemas/applicantEmail'
        mobileNumber:
          $ref: '#/components/schemas/applicantMobileNumber'
        
    #
    #####################################################
    # companyType
    #####################################################
    companyType:
      description: Type of company instance
      type: object
      required:
        - processId
        - companyId
      properties:
        processId:
          $ref: '#/components/schemas/processId'    
        companyId:
          $ref: '#/components/schemas/companyId'
        orgNumber:
          $ref: '#/components/schemas/orgNumber'
        companyName:
          $ref: '#/components/schemas/companyName'
        created:
          $ref: '#/components/schemas/companyCreated'
        
    #
    #####################################################
    # Company
    #####################################################
    Company:
      $ref: '#/components/schemas/companyType'
    #
    #####################################################
    # Companies
    #####################################################
    Companies:
      description: List of companyType
      type: array
      items:
        $ref: '#/components/schemas/companyType'
    #
    ###########################################################
    # householdType
    # household can be connected to one or more customerIds,
    # this to be able to put applicants in the right household
    # TODO: We have to support Delete of Applicant in the array
    ###########################################################
    householdType:
      description: >-
        Household should be loosely coupled in the model. We have to support many customerId in
        a household, this is done by adding customerId to the array customerIds.
      type: object
      required:
        - processId
        - householdId
      properties:
        processId:
          $ref: '#/components/schemas/processId'
        customerIds:
          $ref: '#/components/schemas/customerIds'
        householdId:
          $ref: '#/components/schemas/householdId'
        numberOfChildsAtHome:
          $ref: '#/components/schemas/numberOfChildsAtHome'
        numberOfCars:
          $ref: '#/components/schemas/numberOfCars'
        childMaintenaceCost:
          $ref: '#/components/schemas/childMaintenanceCost'
    #
    #######################################################
    # Household
    #######################################################
    Household:
      $ref: '#/components/schemas/householdType'
    #
    #######################################################
    # Households
    #######################################################
    Households:
      description: >-
        return all available households for a customer
      type: array
      items:
        $ref: '#/components/schemas/householdType'
    #
    #######################################################
    # loanType
    #######################################################
    loanType:
      description: >-
        This represent the customer loan structure
      type: object
      required:
        - processId
        # - customerId
        - loanId
      properties:
        processId:
          $ref: '#/components/schemas/processId'
        #customerId:
        #  $ref: '#/components/schemas/customerId'
        loanId:
          $ref: '#/components/schemas/loanId'
        loanNumber:
          $ref: '#/components/schemas/loanNumber'
        loanAmount:
          $ref: '#/components/schemas/loanAmount'
        numberOfLoans:
          $ref: '#/components/schemas/numberOfLoans'
        purposeOfLoan:
          $ref: '#/components/schemas/purposes'
    #
    #######################################################
    # Loan
    #######################################################
    Loan:
      $ref: '#/components/schemas/loanType'
    #
    #######################################################
    # Loans
    #######################################################
    Loans:
      description: TBD
      type: array
      items:
        $ref: '#/components/schemas/loanType'
    #
    #######################################################
    # extLoanType
    #######################################################
    extLoanType:
      description: >-
        Externa lån kunden har i andra kreditinstitut, detta exkluderar LH-lån
      type: object
      required:
        - processId
        - customerId
        - extloanId
      properties:
        processId:
          $ref: '#/components/schemas/processId'
        customerId:
          $ref: '#/components/schemas/customerId'
        extloanId:
          $ref: '#/components/schemas/extloanId'
        extCreditInstitut:
          $ref: '#/components/schemas/extCreditInstitut'
        extloanClearing:
          $ref: '#/components/schemas/extloanClearing'
        extloanNumber:
          $ref: '#/components/schemas/extloanNumber'
        extRedeemLoan:
          $ref: '#/components/schemas/extRedeemLoan'
    #
    #######################################################
    # ExtLoan
    #######################################################
    ExtLoan:
      $ref: '#/components/schemas/extLoanType'
    #
    #######################################################
    # ExtLoans
    #######################################################
    ExtLoans:
      description: Type definition for external loans
      type: array
      items:
        $ref: '#/components/schemas/extLoanType'
    #
    #######################################################
    # collateralType
    #######################################################
    collateralType:
      description: >-
        Säkerheter för lånet, om köp, även andra fastigheter kan användas som säkerhet för lånet
      type: object
      required:
        - processId
        - customerId
        - collateralId
      properties:
        processId:
          $ref: '#/components/schemas/processId'
        customerId:
          $ref: '#/components/schemas/customerId'
        collateralId:
          $ref: '#/components/schemas/collateralId'
        collateralName:
          $ref: '#/components/schemas/collateralName'
        collateralMunicipality:
          $ref: '#/components/schemas/collateralMunicipality'
        collateralStreet:
          $ref: '#/components/schemas/collateralStreet'
        useAsCollateral:
          $ref: '#/components/schemas/useAsCollateral'
        buyCollateral:
          $ref: '#/components/schemas/buyCollateral'
    #
    #######################################################
    # Collateral
    #######################################################
    Collateral:
      $ref: '#/components/schemas/collateralType'
    #
    #######################################################
    # Colleterals
    #######################################################
    Collaterals:
      description: Array list of type collateralType
      type: array
      items:
        $ref: '#/components/schemas/collateralType'
    #
    #######################################################
    # personalEconomyType
    #######################################################
    personalEconomyType:
      description: >-
        TBD
      type: object
      required:
        - processId
        - customerId
        - personalEconomyId
      properties:
        processId:
          $ref: '#/components/schemas/processId'
        customerId:
          $ref: '#/components/schemas/customerId'
        personalEconomyId:
          $ref: '#/components/schemas/personalEconomyId'
        # Brutto inkomst
        YearlyIncome:
          $ref: '#/components/schemas/yearlyIncome'
        # Inkomst av tjänst
        Income:
          $ref: '#/components/schemas/income'
        # Anställningsform
        TypeOfEmployeement:
          $ref: '#/components/schemas/typeOfEmployeement'
        # Arbetsgivare
        Employeer:
          $ref: '#/components/schemas/employeer'
    #
    #####################################################
    # PersonalEconomy
    #####################################################
    PersonalEconomy:
      $ref: '#/components/schemas/personalEconomyType'
    #
    #####################################################
    # PersonalEconomies
    #####################################################
    PersonalEconomies:
      description: ->
        TBD
      type: array
      items:
        $ref: '#/components/schemas/personalEconomyType'
    #
    #######################################################
    # companyEconomyType
    #######################################################
    companyEconomyType:
      description: >-
        Type definition for company economy
      type: object
      required:
        - processId
        - companyEconomyId
      properties:
        processId:
          $ref: '#/components/schemas/processId'
        companyEconomyId:
          $ref: '#/components/schemas/companyEconomyId'
    #
    #####################################################
    # CompanyEconomy
    #####################################################
    CompanyEconomy:
      $ref: '#/components/schemas/companyEconomyType'
    #
    #####################################################
    # CompanyEconomies
    #####################################################
    CompanyEconomies:
      description: ->
        Type definition for company economies, returns array of CompanyEconomies
      type: array
      items:
        $ref: '#/components/schemas/companyEconomyType'
    #
    #####################################################
    # BudgetType, definitions
    # /processId/companyId/budgetId
    #####################################################
    budgetType:
      description: >-
        Type definition for companyBudget
      type: object
      required:
        - processId
        - companyId
        - budgetId
      properties:
        processId:
          $ref: '#/components/schemas/processId'
        companyId:
          $ref: '#/components/schemas/companyId'
        companyEconomyId:
          $ref: '#/components/schemas/budgetId'
    #
    #####################################################
    # Budget
    #####################################################
    Budget:
      $ref: '#/components/schemas/budgetType'
    #
    #####################################################
    # Budgets
    #####################################################
    Budgets:
      description: >-
        Return an array of type budgetType
      type: array
      items:
        $ref: '#/components/schemas/budgetType'
    #
    #####################################################
    # ProcessType definitions
    #####################################################
    processType:
      description: Process definition
      type: object
      required:
        - processId
        - customerId
      properties:
        processId:
          $ref: '#/components/schemas/processId'
        customerId:
          $ref: '#/components/schemas/customerId'
        processCreatedDate:
          $ref: '#/components/schemas/processCreatedDate'
    #
    ######################################################
    # Process of type processType
    ######################################################
    Process:
      $ref: '#/components/schemas/processType'
    #
    ######################################################
    # Processes List of processType
    ######################################################
    Processes:
      description: >-
        Return a list of type processType
      type: array
      items:
        $ref: '#/components/schemas/processType'
    #
    ######################################################
    # kycInformationType
    ######################################################
    kycInformationType:
      description: KYC-Information
      type: object
      required:
        - processId
        - customerId
      properties:
        processId:
          $ref: '#/components/schemas/processId'
        customerId:
          $ref: '#/components/schemas/customerId'
        kycId:
          $ref: '#/components/schemas/kycId'
        kycAcceptUC:
          $ref: '#/components/schemas/kycAcceptUC'
        kycAcceptGDPR:
          $ref: '#/components/schemas/kycAcceptGDPR'
        kycUCAware:
          $ref: '#/components/schemas/kycUCAware'
        kycPublicFunction:
          $ref: '#/components/schemas/kycPublicFunction'
        kycRelatedPublicFunction:
          $ref: '#/components/schemas/kycRelatedPublicFunction'
    #
    #######################################################
    # KycInformation
    #######################################################
    KycInformation:
      $ref: '#/components/schemas/kycInformationType'
    #
    ######################################################
    # KycInformations
    ######################################################
    KycInformations:
      description: >-
        Return a list of type kycInformationType
      type: array
      items:
        $ref: '#/components/schemas/kycInformationType'
  #
  #####################################################
  #####################################################
  # Predefined Headers
  #####################################################
  #####################################################
  headers:
    X-Request-ID:
      description: >-
        ID of the request, unique to the call, as determined by the initiating
        party.
      required: true
      example: '99391c7e-ad88-49ec-a2ad-99ddcb1f7721'
      schema:
        type: string
        format: uuid
  #
  #####################################################
  #####################################################
  # Predefined Parameters
  #####################################################
  #####################################################
  parameters:
    processId:
      name: processId
      in: path
      description: >- 
        unique identity in Activiti framework
      required: true
      schema:
        $ref: '#/components/schemas/processId'
    caseId:
      name: caseId
      in: path
      description: Global unique identity key in LP for reserved CaseId
      required: true
      schema:
        $ref: '#/components/schemas/caseId'
    caseIdStatus:
      name: caseIdStatus
      in: path
      description: set status in Loan Process for this caseId
      required: true
      schema:
        $ref: '#/components/schemas/caseIdStatus'
    customerId:
      name: customerId
      in: path
      description: >- 
        customerId is swedish ssn or corporate organisation number
      required: true
      schema:
        $ref: '#/components/schemas/customerId'
    companyId:
      name: companyId
      in: path
      description: >- 
        companyId is swedish ssn or corporate organisation number
      required: true
      schema:
        $ref: '#/components/schemas/companyId'
    householdId:
      name: householdId
      in: path
      description: Global unique identity key in Household
      required: true
      schema:
        $ref: '#/components/schemas/householdId'
    loanId:
      name: loanId
      in: path
      description: Global unique identity key in Loan
      required: true
      schema:
        $ref: '#/components/schemas/loanId'
    collateralId:
      name: collateralId
      in: path
      description: Global unique identity key in Collateral
      required: true
      schema:
        $ref: '#/components/schemas/collateralId'
    extloanId:
      name: extloanId
      in: path
      description: Global unique identity key in ExtLoan
      required: true
      schema:
        $ref: '#/components/schemas/extloanId'
    personalEconomyId:
      name: personalEconomyId
      in: path
      description: Global unique identity key in PersonalEconomy
      required: true
      schema:
        $ref: '#/components/schemas/personalEconomyId'
    companyEconomyId:
      name: companyEconomyId
      in: path
      description: Global unique identity key in CompanyEconomy
      required: true
      schema:
        $ref: '#/components/schemas/companyEconomyId'
    kycId:
      name: kycId
      in: path
      description: Global unique identity key in KycInformation
      required: true
      schema:
        $ref: '#/components/schemas/kycId'
    submitApplication:
      name: submitApplication
      in: path
      description: TBD
      required: true
      schema:
        $ref: '#/components/schemas/submitApplication'
  #
  #####################################################
  # Response definitions
  #####################################################
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: Access forbidden
    200OK:
      description: Successful
    InvalidPage:
      description: Invalid page
    PageNotFound:
      description: Page not found
  #
  #####################################################
  #####################################################
  # Reuseable request bodies
  #####################################################
  #####################################################
  requestBodies:
    #
    ###################################################
    # updateApplicant
    ###################################################
    updateApplicant:
      description: Update a specific applicant in the Activiti framework
      required: true
      content: 
        application/json:
          schema:
            oneOf: 
              - $ref: '#/components/schemas/Applicant'
    #
    ###################################################
    # updateCompany
    ###################################################
    updateCompany:
      description: Update a specific company in the Activiti framework
      required: true
      content: 
        application/json:
          schema:
            oneOf: 
              - $ref: '#/components/schemas/Company'
    #
    ###################################################
    # updateHousehold
    ###################################################
    updateHousehold:
      description: Update a specific household in the Activiti framework
      required: true
      content: 
        application/json:
          schema:
            oneOf: 
              - $ref: '#/components/schemas/Household'
    #
    ###################################################
    # updateLoan
    ###################################################
    updateLoan:
      description: Update a specific loan on a customer
      required: true
      content: 
        application/json:
          schema:
            oneOf: 
              - $ref: '#/components/schemas/Loan'
    #
    ###################################################
    # updateCollateral
    ###################################################
    updateCollateral:
      description: Update a specific collateral on a customer
      required: true
      content: 
        application/json:
          schema:
            oneOf: 
              - $ref: '#/components/schemas/Collateral'
    #
    ###################################################
    # updateExtLoan
    ###################################################
    updateExtLoan:
      description: Update a specific external loan on a cusomter
      required: true
      content: 
        application/json:
          schema:
            oneOf: 
              - $ref: '#/components/schemas/ExtLoan'
    #
    ###################################################
    # updatePersonalEconomy
    ###################################################
    updatePersonalEconomy:
      description: Update personal economy on a customer
      required: true
      content: 
        application/json:
          schema:
            oneOf: 
              - $ref: '#/components/schemas/PersonalEconomy'
    #
    ###################################################
    # updateCompanyEconomy
    ###################################################
    updateCompanyEconomy:
      description: TBD
      required: true
      content: 
        application/json:
          schema:
            oneOf: 
              - $ref: '#/components/schemas/CompanyEconomy'
    #
    ###################################################
    # updateBudget
    ###################################################
    updateBudget:
      description: Update a budget on a specific company
      required: true
      content: 
        application/json:
          schema:
            oneOf: 
              - $ref: '#/components/schemas/Budget'
    #
    ####################################################
    # updateKycInformation
    ####################################################
    updateKycInformation:
      description: update a specific customer information object
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/KycInformation'
    #